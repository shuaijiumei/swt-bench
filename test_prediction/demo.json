[
  {
    "model_name_or_path": "agentless",
    "instance_id": "django__django-10914",
    "model_patch": "diff --git a/reproduce_bug.py b/reproduce_bug.py\nnew file mode 100644\nindex 0000000..e69de29\n--- /dev/null\n+++ b/reproduce_bug.py\n@@ -0,0 +1,64 @@\n+import os\n+import unittest\n+import tempfile\n+from django.core.files.storage import FileSystemStorage\n+from django.core.files.uploadedfile import TemporaryUploadedFile, InMemoryUploadedFile\n+from django.conf import settings\n+\n+# Set up Django settings for the test\n+settings.configure(\n+    FILE_UPLOAD_PERMISSIONS=0o644,\n+    FILE_UPLOAD_DIRECTORY_PERMISSIONS=None,\n+    MEDIA_ROOT=tempfile.gettempdir(),\n+)\n+\n+class FileUploadPermissionsTest(unittest.TestCase):\n+\n+    def setUp(self):\n+        # Initialize the file system storage\n+        self.storage = FileSystemStorage()\n+\n+    def test_memory_uploaded_file_permissions(self):\n+        file_content = b\"dummy content\"\n+        file_name = \"test_memory.txt\"\n+        uploaded_file = InMemoryUploadedFile(\n+            file=BytesIO(file_content),\n+            field_name=\"file\",\n+            name=file_name,\n+            content_type=\"text/plain\",\n+            size=len(file_content),\n+            charset=\"utf-8\"\n+        )\n+        self.storage.save(file_name, uploaded_file)\n+        file_path = os.path.join(settings.MEDIA_ROOT, file_name)\n+        \n+        # Check file permissions\n+        self.assertEqual(oct(os.stat(file_path).st_mode & 0o777), oct(settings.FILE_UPLOAD_PERMISSIONS))\n+\n+        # Clean up\n+        os.remove(file_path)\n+\n+    def test_temporary_uploaded_file_permissions(self):\n+        file_content = b\"dummy content\"\n+        file_name = \"test_temp.txt\"\n+        \n+        with TemporaryUploadedFile(\n+            name=file_name,\n+            content_type=\"text/plain\",\n+            size=len(file_content),\n+            charset=\"utf-8\"\n+        ) as temp_file:\n+            temp_file.write(file_content)\n+            temp_file.seek(0)\n+            self.storage.save(file_name, temp_file)\n+        \n+        file_path = os.path.join(settings.MEDIA_ROOT, file_name)\n+        \n+        # Check file permissions\n+        self.assertEqual(oct(os.stat(file_path).st_mode & 0o777), oct(settings.FILE_UPLOAD_PERMISSIONS))\n+        \n+        # Clean up\n+        os.remove(file_path)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n",
    "raw_test_patch": "Sure, here's a complete test code that you can run independently to reproduce the issue described in the issue text:\n\n```python\nimport os\nimport unittest\nimport tempfile\nfrom django.core.files.storage import FileSystemStorage\nfrom django.core.files.uploadedfile import TemporaryUploadedFile, InMemoryUploadedFile\nfrom django.conf import settings\n\n# Set up Django settings for the test\nsettings.configure(\n    FILE_UPLOAD_PERMISSIONS=0o644,\n    FILE_UPLOAD_DIRECTORY_PERMISSIONS=None,\n    MEDIA_ROOT=tempfile.gettempdir(),\n)\n\nclass FileUploadPermissionsTest(unittest.TestCase):\n\n    def setUp(self):\n        # Initialize the file system storage\n        self.storage = FileSystemStorage()\n\n    def test_memory_uploaded_file_permissions(self):\n        file_content = b\"dummy content\"\n        file_name = \"test_memory.txt\"\n        uploaded_file = InMemoryUploadedFile(\n            file=BytesIO(file_content),\n            field_name=\"file\",\n            name=file_name,\n            content_type=\"text/plain\",\n            size=len(file_content),\n            charset=\"utf-8\"\n        )\n        self.storage.save(file_name, uploaded_file)\n        file_path = os.path.join(settings.MEDIA_ROOT, file_name)\n        \n        # Check file permissions\n        self.assertEqual(oct(os.stat(file_path).st_mode & 0o777), oct(settings.FILE_UPLOAD_PERMISSIONS))\n\n        # Clean up\n        os.remove(file_path)\n\n    def test_temporary_uploaded_file_permissions(self):\n        file_content = b\"dummy content\"\n        file_name = \"test_temp.txt\"\n        \n        with TemporaryUploadedFile(\n            name=file_name,\n            content_type=\"text/plain\",\n            size=len(file_content),\n            charset=\"utf-8\"\n        ) as temp_file:\n            temp_file.write(file_content)\n            temp_file.seek(0)\n            self.storage.save(file_name, temp_file)\n        \n        file_path = os.path.join(settings.MEDIA_ROOT, file_name)\n        \n        # Check file permissions\n        self.assertEqual(oct(os.stat(file_path).st_mode & 0o777), oct(settings.FILE_UPLOAD_PERMISSIONS))\n        \n        # Clean up\n        os.remove(file_path)\n\nif __name__ == '__main__':\n    unittest.main()\n```\n\nThis test:\n1. Sets up necessary Django settings.\n2. Checks if the permissions for files uploaded via `InMemoryUploadedFile` and `TemporaryUploadedFile` match the `FILE_UPLOAD_PERMISSIONS` setting, which is set to `0o644` in this case.\n3. Ensures the test is self-contained and can be run independently.\n\nTo verify the issue has been fixed, run the test file in an environment where Django is correctly set up.",
    "original_file_content": ""
  }
]